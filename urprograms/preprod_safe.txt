 Program
   Init Variables
   BeforeStart
     Config
       'The tcp rotation components relative to stack'
       stack_ry≔-180
       print_width≔0.04
       printer_width≔0.125
       ramp_dist≔0.1
     Setup Variables
       print_enable≔ False 
     Restart Checks
       tasks_equal≔task≟current_task
       tasks_printing≔task≠0 and current_task≠0
       resume_task≔start_continue and tasks_equal and tasks_printing
       vision_prev≔vision_pos
     Keep current pos as home
       sp≔get_actual_joint_positions()
       MoveJ
         sp
     Reset bits
       Set task_done=Off
       Set task_active=Off
       Set current_task=0
       Set moving_home=Off
       Set homed=Off
     Call SetReference
   Robot Program
     If gantry_in_pos
       Call SetReference
       If cancel_home
         Set current_task=0
         Set task_done=Off
         Set task_active=Off
         If  not homed
           Set moving_home= False 
           MoveL
             home
               Until (reached_waypoint)
                 Set homed=On
           Set moving_home= True 
       ElseIf task≟1 or task≟2
         Call StartTask
         Call SetWaypoints
         Call MoveWaypoints
         Call FinishTask
   SetReference
     Switch gantry_pos
       Case 1
         reference≔stack_a_const
       Case 2
         reference≔stack_b_const
       Default Case
         reference≔stack_a_const
         Popup: Err: Gantry not in pos
   StartTask
     Set current_task=task
     Set task_active=On
   SetWaypoints
     Set Ordering
       If current_task≟1
         'Left to right (+ive)'
         xm≔1
         B1≔p[X1, Y, Z, 0, 0, 0]
         B3≔p[X3, Y, Z, 0, 0, 0]
       ElseIf current_task≟2
         'Right to left (-ive)'
         xm≔-1
         B1≔p[X3, Y, Z, 0, 0, 0]
         B3≔p[X1, Y, Z, 0, 0, 0]
     Calculate Waypoints
       runover≔printer_width/2+ramp_dist
       PA1_EN≔pose_add(B1, p[-runover*xm, 0, 0, 0, d2r(stack_ry), 0])
       PA3_EX≔pose_add(B3, p[+runover*xm, 0, 0, 0, d2r(stack_ry), 0])
     Reference Base
       PA1_EN≔pose_trans(reference, PA1_EN)
       PA3_EX≔pose_trans(reference, PA3_EX)
   MoveWaypoints
     z_based≔pose_trans(reference, p[0, 0, z_min, 0, 0, 0])
     z_based_pos≔z_based[1]
     local_entry_pos≔PA1_EN
     local_entry_z≔local_entry_pos[1]
     local_robo_pos≔get_actual_tcp_pose()
     local_robo_z≔local_robo_pos[1]
     ENTRY≔pose_add(local_entry_pos, p[0, z_based_pos-local_entry_z, 0, 0, 0, 0])
     EXIT≔pose_add(local_robo_pos, p[0, z_based_pos - local_robo_z, 0, 0, 0, 0])
     If homed or local_robo_z<z_based_pos
       Set homed= False 
       print_enable≔ True 
       MoveL
         ENTRY
           Until (expression)
         PA1_EN
           Until (expression)
         PA3_EX
           Until (expression)
       print_enable≔ False 
     ElseIf resume_task
       Set homed= False 
       PA1_EN≔pose_trans(reference, vision_prev)
       MoveL
         print_enable≔ True 
         PA3_EX
           Until (expression)
         print_enable≔ False 
         resume_task≔ False 
     ElseIf last_task≟2 and current_task≟1
       Set homed= False 
       MoveL
         PA1_EN
           Until (expression)
         print_enable≔ True 
         PA3_EX
           Until (expression)
         print_enable≔ False 
     Else
       Set homed= False 
       MoveL
         EXIT
         ENTRY
         PA1_EN
           Until (expression)
         print_enable≔ True 
         PA3_EX
           Until (expression)
         print_enable≔ False 
   FinishTask
     last_task≔current_task
     Set task_active=Off
     Set task_done=On
     Wait task≟0 or cancel_home
     Set current_task=0
     Set task_done=Off
   Thread_1
     vision_pos≔pose_trans(pose_inv(reference), get_actual_tcp_pose())
     vision_x≔vision_pos[0]
     If print_enable
       print1≔norm(vision_x - X1) ≤ print_width/2
       print2≔norm(vision_x - X2) ≤ print_width/2
       print3≔norm(vision_x - X3) ≤ print_width/2
       Set printing=print1 or print2 or print3
     sync()
   Thread_2
     zz_home_set≔cancel_home
     zz_task_set≔task
     zz_crnt_tsk_set≔current_task
     sync()
