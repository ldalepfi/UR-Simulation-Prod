 Program
   Init Variables
   BeforeStart
     Config
       'The tcp rotation components relative to stack'
       stack_ry≔-180
       printer_width≔0.025
     Setup Variables
       print_enable≔ False 
     Folder
       tasks_equal≔task≟current_task
       tasks_printing≔task≠0 and current_task≠0
       resume_task≔start_continue and tasks_equal and tasks_printing
       var_1≔task
       var_2≔current_task
       var_3≔resume_task
       vision_prev≔vision_pos
       If resume_task
         sp≔get_actual_joint_positions()
         MoveJ
           sp
     Folder
       Set task_done=Off
       Set task_active=Off
       Set current_task=0
       Set moving_home=Off
       Set homed=Off
     Call SetReference
   Robot Program
     If gantry_in_pos
       If cancel_home
         If  not homed
           Set moving_home= False 
           MoveJ
             home
               Until (reached_waypoint)
                 Set homed=On
           Set moving_home= True 
       ElseIf task≟1 or task≟2
         Call SetReference
         Call StartTask
         Call SetWaypoints
         Call MoveWaypoints
         Call FinishTask
   SetReference
     Switch gantry_pos
       Case 1
         reference≔stack_a_const
       Case 2
         reference≔stack_b_const
       Default Case
         reference≔stack_a_const
         Popup: Err: Gantry not in pos
   StartTask
     Set current_task=task
     Set task_active=On
   SetWaypoints
     Set Ordering
       If current_task≟1
         'Left to right (+ive)'
         xm≔1
         B1≔p[X1, Y, Z, 0, 0, 0]
         B3≔p[X3, Y, Z, 0, 0, 0]
       ElseIf current_task≟2
         'Right to left (-ive)'
         xm≔-1
         B1≔p[X3, Y, Z, 0, 0, 0]
         B3≔p[X1, Y, Z, 0, 0, 0]
     Calculate Waypoints
       runover≔printer_width/2
       PA1_EN≔pose_add(B1, p[-runover*xm,0,0, 0, d2r(stack_ry), 0])
       PA3_EX≔pose_add(B3, p[+runover*xm, 0, 0, 0, d2r(stack_ry), 0])
     Reference Base
       PA1_EN≔pose_trans(reference, PA1_EN)
       PA3_EX≔pose_trans(reference, PA3_EX)
   MoveWaypoints
     If resume_task
       PA1_EN≔pose_trans(reference, vision_prev)
     If homed
       Set homed= False 
       MoveJ
         PA1_EN
           Until (expression)
       MoveL
         PA3_EX
           Until (expression)
     Else
       Set homed= False 
       If homed
         <empty>
       ElseIf resume_task
         <empty>
       ElseIf last_task≟1 and current_task≟2
         <empty>
       Else
         <empty>
       If resume_task
         MoveL
           PA1_EN
             Until (expression)
           PA3_EX
             Until (expression)
       Else
         If last_task≟1 and current_task≟2
           MoveL
             PA1_EN
               Until (expression)
             PA3_EX
               Until (expression)
         Else
           MoveL
             PA1_EN
               Until (expression)
             PA3_EX
               Until (expression)
     print_enable≔ True 
     resume_task≔ False 
     print_enable≔ False 
   FinishTask
     last_task≔current_task
     Set task_active=Off
     Set task_done=On
     Wait task≟0 or cancel_home
     Set current_task=0
     Set task_done=Off
   Thread_1
     vision_pos≔pose_trans(pose_inv(reference), get_actual_tcp_pose())
     vision_x≔vision_pos[0]
     If print_enable
       print1≔norm(vision_x - X1) ≤ printer_width/2
       print2≔norm(vision_x - X2) ≤ printer_width/2
       print3≔norm(vision_x - X3) ≤ printer_width/2
       Set printing=print1 or print2 or print3
     sync()
   Thread_2
     zz_home_set≔cancel_home
     zz_task_set≔task
     zz_crnt_tsk_set≔current_task
     sync()
