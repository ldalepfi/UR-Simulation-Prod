def preprod_safe():
  set_safety_mode_transition_hardness(1)
  step_count_908a12df_8d28_47ca_be31_64c68fdc83e3 = 0.0
  thread Step_Counter_Thread_3afb7c77_6cb1_4ed8_be71_56a8217d4af5():
    while (True):
      step_count_908a12df_8d28_47ca_be31_64c68fdc83e3 = step_count_908a12df_8d28_47ca_be31_64c68fdc83e3 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_3afb7c77_6cb1_4ed8_be71_56a8217d4af5()
  set_tool_voltage(0)
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.0)
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_runstate_gp_boolean_output_to_value(74, 3)
  global i_last_task=0
  global i_curr_task=0
  global Base=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global stack_a=p[-0.14137530154519934,0.8386886638567186,0.08396104889033652,1.5712595903583884,3.0231827271147806E-4,-3.5889649802770365E-4]
  global stack_b=p[-0.14129376083067505,0.838735528923205,0.0840756727495184,1.571697410288359,1.7980834580876096E-4,-6.606500355573187E-4]
  global last_task=1
  global vision_pos=p[0.01896, 0.11856, 0.32319, 0.00581, 3.03812, -0.0458]
  def SetReference():
    $ 46 "SetReference" "noBreak"
    $ 47 "Switch gantry_pos"
    switch_1 = read_input_integer_register(1)
    $ 48 "Case 1"
    if (1 == switch_1):
      $ 49 "reference≔stack_a_const"
      global reference=p[-0.14137530154519934,0.8386886638567186,0.08396104889033652,1.5712595903583884,3.0231827271147806E-4,-3.5889649802770365E-4]
    elif (2 == switch_1):
      $ 50 "Case 2"
      $ 51 "reference≔stack_b_const"
      global reference=p[-0.14129376083067505,0.838735528923205,0.0840756727495184,1.571697410288359,1.7980834580876096E-4,-6.606500355573187E-4]
    else:
      $ 52 "Default Case"
      $ 53 "reference≔stack_a_const"
      global reference=p[-0.14137530154519934,0.8386886638567186,0.08396104889033652,1.5712595903583884,3.0231827271147806E-4,-3.5889649802770365E-4]
      $ 54 "Popup: Err: Gantry not in pos"
      popup("Err: Gantry not in pos", "Warning", True, False, blocking=True)
    end
  end
  def StartTask():
    $ 55 "StartTask" "noBreak"
    $ 56 "Set current_task=task"
    write_output_integer_register(0, read_input_integer_register(0))
    $ 57 "Set task_active=On"
    write_output_boolean_register(64, True)
  end
  def SetWaypoints():
    $ 58 "SetWaypoints" "noBreak"
    $ 59 "Set Ordering"
    $ 60 "If current_task≟1"
    if (read_output_integer_register(0) == 1):
      $ 61 "'Left to right (+ive)'"
      # 'Left to right (+ive)'
      $ 62 "xm≔1"
      global xm=1
      $ 63 "B1≔p[X1, Y, Z, 0, 0, 0]"
      global B1=p[read_input_float_register(0), read_input_float_register(3), read_input_float_register(6), 0, 0, 0]
      $ 64 "B3≔p[X3, Y, Z, 0, 0, 0]"
      global B3=p[read_input_float_register(2), read_input_float_register(3), read_input_float_register(6), 0, 0, 0]
    else:
      $ 65 "ElseIf current_task≟2"
      if (read_output_integer_register(0) == 2):
        $ 66 "'Right to left (-ive)'"
        # 'Right to left (-ive)'
        $ 67 "xm≔-1"
        global xm=-1
        $ 68 "B1≔p[X3, Y, Z, 0, 0, 0]"
        global B1=p[read_input_float_register(2), read_input_float_register(3), read_input_float_register(6), 0, 0, 0]
        $ 69 "B3≔p[X1, Y, Z, 0, 0, 0]"
        global B3=p[read_input_float_register(0), read_input_float_register(3), read_input_float_register(6), 0, 0, 0]
      end
    end
    $ 70 "Calculate Waypoints"
    $ 71 "runover≔printer_width/2+ramp_dist"
    global runover=printer_width/2+ramp_dist
    $ 72 "PA1_EN≔pose_add(B1, p[-runover*xm, 0, 0, 0, d2r(stack_ry), 0])"
    global PA1_EN= pose_add (B1, p[-runover*xm, 0, 0, 0,  d2r (stack_ry), 0])
    $ 73 "PA3_EX≔pose_add(B3, p[+runover*xm, 0, 0, 0, d2r(stack_ry), 0])"
    global PA3_EX= pose_add (B3, p[+runover*xm, 0, 0, 0,  d2r (stack_ry), 0])
    $ 74 "Reference Base"
    $ 75 "PA1_EN≔pose_trans(reference, PA1_EN)"
    global PA1_EN= pose_trans (reference, PA1_EN)
    $ 76 "PA3_EX≔pose_trans(reference, PA3_EX)"
    global PA3_EX= pose_trans (reference, PA3_EX)
  end
  def MoveWaypoints():
    $ 77 "MoveWaypoints" "noBreak"
    $ 78 "z_based≔pose_trans(reference, p[0, 0, z_min, 0, 0, 0])"
    global z_based= pose_trans (reference, p[0, 0, read_input_float_register(9), 0, 0, 0])
    $ 79 "z_based_pos≔z_based[1]"
    global z_based_pos=z_based[1]
    $ 80 "local_entry_pos≔PA1_EN"
    global local_entry_pos=PA1_EN
    $ 81 "local_entry_z≔local_entry_pos[1]"
    global local_entry_z=local_entry_pos[1]
    $ 82 "local_robo_pos≔get_actual_tcp_pose()"
    global local_robo_pos= get_actual_tcp_pose ()
    $ 83 "local_robo_z≔local_robo_pos[1]"
    global local_robo_z=local_robo_pos[1]
    $ 84 "ENTRY≔pose_add(local_entry_pos, p[0, z_based_pos-local_entry_z, 0, 0, 0, 0])"
    global ENTRY= pose_add (local_entry_pos, p[0, z_based_pos-local_entry_z, 0, 0, 0, 0])
    $ 85 "EXIT≔pose_add(local_robo_pos, p[0, z_based_pos - local_robo_z, 0, 0, 0, 0])"
    global EXIT= pose_add (local_robo_pos, p[0, z_based_pos - local_robo_z, 0, 0, 0, 0])
    $ 86 "If homed or local_robo_z<z_based_pos"
    if (read_output_boolean_register(67)  or  local_robo_z<z_based_pos):
      $ 87 "Set homed= False "
      write_output_boolean_register(67,   False  )
      $ 88 "print_enable≔ True "
      global print_enable=  True  
      $ 89 "MoveL"
      $ 90 "ENTRY" "breakAfter"
      global move_thread_flag_90=0
      thread move_thread_90():
        enter_critical
        move_thread_flag_90 = 1
        movel(pose_trans(Base, ENTRY), a=0.8, v=0.5, r=0.025)
        move_thread_flag_90 = 2
        exit_critical
      end
      move_thread_flag_90 = 0
      move_thread_han_90 = run move_thread_90()
      while (True):
        if (read_input_boolean_register(76)):
          kill move_thread_han_90
          stopl(3.0)
          $ 91 "Until (expression)"
          break
        end
        sleep(1.0E-10)
        if (move_thread_flag_90 > 1):
          join move_thread_han_90
          break
        end
        sync()
      end
      $ 92 "PA1_EN" "breakAfter"
      global move_thread_flag_92=0
      thread move_thread_92():
        enter_critical
        move_thread_flag_92 = 1
        movel(pose_trans(Base, PA1_EN), a=0.8, v=0.5, r=0.05)
        move_thread_flag_92 = 2
        exit_critical
      end
      move_thread_flag_92 = 0
      move_thread_han_92 = run move_thread_92()
      while (True):
        if (read_input_boolean_register(76)):
          kill move_thread_han_92
          stopl(3.0)
          $ 93 "Until (expression)"
          break
        end
        sleep(1.0E-10)
        if (move_thread_flag_92 > 1):
          join move_thread_han_92
          break
        end
        sync()
      end
      $ 94 "PA3_EX" "breakAfter"
      global move_thread_flag_94=0
      thread move_thread_94():
        enter_critical
        move_thread_flag_94 = 1
        movel(pose_trans(Base, PA3_EX), a=3.0, v=0.8)
        move_thread_flag_94 = 2
        exit_critical
      end
      move_thread_flag_94 = 0
      move_thread_han_94 = run move_thread_94()
      while (True):
        if (read_input_boolean_register(76)):
          kill move_thread_han_94
          stopl(3.0)
          $ 95 "Until (expression)"
          break
        end
        sleep(1.0E-10)
        if (move_thread_flag_94 > 1):
          join move_thread_han_94
          break
        end
        sync()
      end
      $ 96 "print_enable≔ False "
      global print_enable=  False  
    else:
      $ 97 "ElseIf resume_task"
      if (resume_task):
        $ 98 "Set homed= False "
        write_output_boolean_register(67,   False  )
        $ 99 "PA1_EN≔pose_trans(reference, vision_prev)"
        global PA1_EN= pose_trans (reference, vision_prev)
        $ 100 "MoveL"
        $ 101 "print_enable≔ True "
        global print_enable=  True  
        $ 102 "PA3_EX" "breakAfter"
        global move_thread_flag_102=0
        thread move_thread_102():
          enter_critical
          move_thread_flag_102 = 1
          movel(pose_trans(Base, PA3_EX), a=3.0, v=0.8)
          move_thread_flag_102 = 2
          exit_critical
        end
        move_thread_flag_102 = 0
        move_thread_han_102 = run move_thread_102()
        while (True):
          if (read_input_boolean_register(76)):
            kill move_thread_han_102
            stopl(3.0)
            $ 103 "Until (expression)"
            break
          end
          sleep(1.0E-10)
          if (move_thread_flag_102 > 1):
            join move_thread_han_102
            break
          end
          sync()
        end
        $ 104 "print_enable≔ False "
        global print_enable=  False  
        $ 105 "resume_task≔ False "
        global resume_task=  False  
      else:
        $ 106 "ElseIf last_task≟2 and current_task≟1"
        if (last_task == 2  and  read_output_integer_register(0) == 1):
          $ 107 "Set homed= False "
          write_output_boolean_register(67,   False  )
          $ 108 "MoveL"
          $ 109 "PA1_EN" "breakAfter"
          global move_thread_flag_109=0
          thread move_thread_109():
            enter_critical
            move_thread_flag_109 = 1
            movel(pose_trans(Base, PA1_EN), a=0.8, v=0.5, r=0.08)
            move_thread_flag_109 = 2
            exit_critical
          end
          move_thread_flag_109 = 0
          move_thread_han_109 = run move_thread_109()
          while (True):
            if (read_input_boolean_register(76)):
              kill move_thread_han_109
              stopl(3.0)
              $ 110 "Until (expression)"
              break
            end
            sleep(1.0E-10)
            if (move_thread_flag_109 > 1):
              join move_thread_han_109
              break
            end
            sync()
          end
          $ 111 "print_enable≔ True "
          global print_enable=  True  
          $ 112 "PA3_EX" "breakAfter"
          global move_thread_flag_112=0
          thread move_thread_112():
            enter_critical
            move_thread_flag_112 = 1
            movel(pose_trans(Base, PA3_EX), a=3.0, v=0.8)
            move_thread_flag_112 = 2
            exit_critical
          end
          move_thread_flag_112 = 0
          move_thread_han_112 = run move_thread_112()
          while (True):
            if (read_input_boolean_register(76)):
              kill move_thread_han_112
              stopl(3.0)
              $ 113 "Until (expression)"
              break
            end
            sleep(1.0E-10)
            if (move_thread_flag_112 > 1):
              join move_thread_han_112
              break
            end
            sync()
          end
          $ 114 "print_enable≔ False "
          global print_enable=  False  
        else:
          $ 115 "Else" "noBreak"
          $ 116 "Set homed= False "
          write_output_boolean_register(67,   False  )
          $ 117 "MoveL"
          $ 118 "EXIT" "breakAfter"
          movel(pose_trans(Base, EXIT), a=0.8, v=0.5, r=0.04)
          $ 119 "ENTRY" "breakAfter"
          movel(pose_trans(Base, ENTRY), a=0.8, v=0.5, r=0.03)
          $ 120 "PA1_EN" "breakAfter"
          global move_thread_flag_120=0
          thread move_thread_120():
            enter_critical
            move_thread_flag_120 = 1
            movel(pose_trans(Base, PA1_EN), a=0.8, v=0.5, r=0.05)
            move_thread_flag_120 = 2
            exit_critical
          end
          move_thread_flag_120 = 0
          move_thread_han_120 = run move_thread_120()
          while (True):
            if (read_input_boolean_register(76)):
              kill move_thread_han_120
              stopl(3.0)
              $ 121 "Until (expression)"
              break
            end
            sleep(1.0E-10)
            if (move_thread_flag_120 > 1):
              join move_thread_han_120
              break
            end
            sync()
          end
          $ 122 "print_enable≔ True "
          global print_enable=  True  
          $ 123 "PA3_EX" "breakAfter"
          global move_thread_flag_123=0
          thread move_thread_123():
            enter_critical
            move_thread_flag_123 = 1
            movel(pose_trans(Base, PA3_EX), a=3.0, v=0.8)
            move_thread_flag_123 = 2
            exit_critical
          end
          move_thread_flag_123 = 0
          move_thread_han_123 = run move_thread_123()
          while (True):
            if (read_input_boolean_register(76)):
              kill move_thread_han_123
              stopl(3.0)
              $ 124 "Until (expression)"
              break
            end
            sleep(1.0E-10)
            if (move_thread_flag_123 > 1):
              join move_thread_han_123
              break
            end
            sync()
          end
          $ 125 "print_enable≔ False "
          global print_enable=  False  
        end
      end
    end
  end
  def FinishTask():
    $ 126 "FinishTask" "noBreak"
    $ 127 "last_task≔current_task"
    global last_task=read_output_integer_register(0)
    $ 128 "Set task_active=Off"
    write_output_boolean_register(64, False)
    $ 129 "Set task_done=On"
    write_output_boolean_register(65, True)
    $ 130 "Wait task≟0 or cancel_home"
    while (not(read_input_integer_register(0) == 0  or  read_input_boolean_register(76))):
      sync()
    end
    $ 131 "Set current_task=0"
    write_output_integer_register(0, 0)
    $ 132 "Set task_done=Off"
    write_output_boolean_register(65, False)
  end
  $ 2 "BeforeStart"
  $ 3 "Config"
  $ 4 "'The tcp rotation components relative to stack'"
  # 'The tcp rotation components relative to stack'
  $ 5 "stack_ry≔-180"
  global stack_ry=-180
  $ 6 "print_width≔0.04"
  global print_width=0.04
  $ 7 "printer_width≔0.125"
  global printer_width=0.125
  $ 8 "ramp_dist≔0.1"
  global ramp_dist=0.1
  $ 9 "Setup Variables"
  $ 10 "print_enable≔ False "
  global print_enable=  False  
  $ 11 "Restart Checks"
  $ 12 "tasks_equal≔task≟current_task"
  global tasks_equal=read_input_integer_register(0) == read_output_integer_register(0)
  $ 13 "tasks_printing≔task≠0 and current_task≠0"
  global tasks_printing=read_input_integer_register(0) != 0  and  read_output_integer_register(0) != 0
  $ 14 "resume_task≔start_continue and tasks_equal and tasks_printing"
  global resume_task=read_input_boolean_register(64)  and  tasks_equal  and  tasks_printing
  $ 15 "vision_prev≔vision_pos"
  global vision_prev=vision_pos
  $ 16 "Keep current pos as home"
  $ 17 "sp≔get_actual_joint_positions()"
  global sp= get_actual_joint_positions ()
  $ 18 "MoveJ"
  $ 19 "sp" "breakAfter"
  movej(sp, a=1.3962634015954636, v=1.0471975511965976)
  $ 20 "Reset bits"
  $ 21 "Set task_done=Off"
  write_output_boolean_register(65, False)
  $ 22 "Set task_active=Off"
  write_output_boolean_register(64, False)
  $ 23 "Set current_task=0"
  write_output_integer_register(0, 0)
  $ 24 "Set moving_home=Off"
  write_output_boolean_register(66, False)
  $ 25 "Set homed=Off"
  write_output_boolean_register(67, False)
  $ 26 "Call SetReference"
  SetReference()
  $ 133 "Thread_1"
  thread Thread_1():
    while (True):
      $ 134 "vision_pos≔pose_trans(pose_inv(reference), get_actual_tcp_pose())"
      global vision_pos= pose_trans ( pose_inv (reference),  get_actual_tcp_pose ())
      $ 135 "vision_x≔vision_pos[0]"
      global vision_x=vision_pos[0]
      $ 136 "If print_enable"
      if (print_enable):
        $ 137 "print1≔norm(vision_x - X1) ≤ print_width/2"
        global print1=norm(vision_x - read_input_float_register(0))  <=  print_width/2
        $ 138 "print2≔norm(vision_x - X2) ≤ print_width/2"
        global print2=norm(vision_x - read_input_float_register(1))  <=  print_width/2
        $ 139 "print3≔norm(vision_x - X3) ≤ print_width/2"
        global print3=norm(vision_x - read_input_float_register(2))  <=  print_width/2
        $ 140 "Set printing=print1 or print2 or print3"
        write_output_boolean_register(68, print1  or  print2  or  print3)
      end
      $ 141 "sync()"
      sync()
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 142 "Thread_2"
  thread Thread_2():
    while (True):
      $ 143 "zz_home_set≔cancel_home"
      global zz_home_set=read_input_boolean_register(76)
      $ 144 "zz_task_set≔task"
      global zz_task_set=read_input_integer_register(0)
      $ 145 "zz_crnt_tsk_set≔current_task"
      global zz_crnt_tsk_set=read_output_integer_register(0)
      $ 146 "sync()"
      sync()
    end
  end
  threadId_Thread_2 = run Thread_2()
  while (True):
    $ 27 "Robot Program"
    $ 28 "If gantry_in_pos"
    if (read_input_boolean_register(74)):
      $ 29 "Call SetReference"
      SetReference()
      $ 30 "If cancel_home"
      if (read_input_boolean_register(76)):
        $ 31 "Set current_task=0"
        write_output_integer_register(0, 0)
        $ 32 "Set task_done=Off"
        write_output_boolean_register(65, False)
        $ 33 "Set task_active=Off"
        write_output_boolean_register(64, False)
        $ 34 "If  not homed"
        if (  not  read_output_boolean_register(67)):
          $ 35 "Set moving_home= False "
          write_output_boolean_register(66,   False  )
          $ 36 "MoveL"
          $ 37 "home" "breakAfter"
          global move_thread_flag_37=0
          thread move_thread_37():
            enter_critical
            move_thread_flag_37 = 1
            movel(pose_trans(Base, p[-0.1546642000408162,0.5014385200640559,0.16834194807926767,0.12405551030047407,2.2010704699073784,2.132590514954865]), a=0.5, v=0.8, r=0.05)
            move_thread_flag_37 = 2
            exit_critical
          end
          move_thread_flag_37 = 0
          move_thread_han_37 = run move_thread_37()
          while (True):
            sleep(1.0E-10)
            if (move_thread_flag_37 > 1):
              join move_thread_han_37
              $ 38 "Until (reached_waypoint)"
              $ 39 "Set homed=On"
              write_output_boolean_register(67, True)
              break
            end
            sync()
          end
          $ 40 "Set moving_home= True "
          write_output_boolean_register(66,   True  )
        end
      else:
        $ 41 "ElseIf task≟1 or task≟2"
        if (read_input_integer_register(0) == 1  or  read_input_integer_register(0) == 2):
          $ 42 "Call StartTask"
          StartTask()
          $ 43 "Call SetWaypoints"
          SetWaypoints()
          $ 44 "Call MoveWaypoints"
          MoveWaypoints()
          $ 45 "Call FinishTask"
          FinishTask()
        end
      end
    end
  end
end
